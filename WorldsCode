#pragma config(Sensor, dgtl8,  quadshoot,      sensorQuadEncoder)
#pragma config(Motor,  port1,           intake,        tmotorVex393TurboSpeed_HBridge, openLoop, driveRight)
#pragma config(Motor,  port2,           midRight,      tmotorVex393TurboSpeed_MC29, openLoop, reversed, driveRight)
#pragma config(Motor,  port3,           midShoottwo,   tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           midShoot,      tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           topShoot,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port6,           bottomShoot,   tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           backRight,     tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           backleft,      tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           midLeft,       tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          intaketwo,     tmotorVex393TurboSpeed_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// Update inteval (in mS) for the flywheel control loop
#define FW_LOOP_SPEED              25

// Maximum power we want to send to the flywheel motors
#define FW_MAX_POWER              120



int trueSpeed(int power) {
	int tsArray[128] =
	{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 		20, 21, 21, 21, 22, 22, 22, 23, 24, 24,
 		25, 25, 25, 25, 26, 27, 27, 28, 28, 28,
 		28, 29, 30, 30, 30, 31, 31, 32, 32, 32,
 		33, 33, 34, 34, 35, 35, 35, 36, 36, 37,
 		37, 37, 37, 38, 38, 39, 39, 39, 40, 40,
 		41, 41, 42, 42, 43, 44, 44, 45, 45, 46,
 		46, 47, 47, 48, 48, 49, 50, 50, 51, 52,
 		52, 53, 54, 55, 56, 57, 57, 58, 59, 60,
 		61, 62, 63, 64, 65, 66, 67, 67, 68, 70,
 		71, 72, 72, 73, 74, 76, 77, 78, 79, 79,
 		80, 81, 83, 84, 84, 86, 86, 87, 87, 88,
 		88, 89, 127, 127, 127,127,127,127
	};
	return ((power>0)?1:-1)*tsArray[power*((power>0)?1:-1)];
}

// encoder counts per revolution depending on motor
#define MOTOR_TPR_269           240.448
#define MOTOR_TPR_393R          261.333
#define MOTOR_TPR_393S          392
#define MOTOR_TPR_393T          627.2
#define MOTOR_TPR_QUAD          72

// Structure to gather all the flywheel ralated data
typedef struct _fw_controller {
	long            counter;                ///< loop counter used for debug

	// encoder tick per revolution
	float           ticks_per_rev;          ///< encoder ticks per revolution

	// Encoder
	long            e_current;              ///< current encoder count
	long            e_last;                 ///< current encoder count

	// velocity measurement
	float           v_current;              ///< current velocity in rpm
	long            v_time;                 ///< Time of last velocity calculation

	// TBH control algorithm variables
	long            target;                 ///< target velocity
	long            current;                ///< current velocity
	long            last;                   ///< last velocity
	float           error;                  ///< error between actual and target velocities
	float           last_error;             ///< error last time update called
	float           gain;                   ///< gain
	float           drive;                  ///< final drive out of TBH (0.0 to 1.0)
	float           drive_at_zero;          ///< drive at last zero crossing
	long            first_cross;            ///< flag indicating first zero crossing
	float           drive_approx;           ///< estimated open loop drive

	// final motor drive
	long            motor_drive;            ///< final motor control value
} fw_controller;

// Make the controller global for easy debugging
static  fw_controller   flywheel;


void
FwMotorSet( int value )
{
	motor[ topShoot ] = value;
	motor[ midShoot ] = value;
	motor[ bottomShoot ] = value;
}

//Encoder Count
long
FwMotorEncoderGet()
{
	return( SensorValue[dgtl8] );
}

/*-----------------------------------------------------------------------------*/
/** @brief      Set the controller position                                    */
/** @param[in]  fw pointer to flywheel controller structure                    */
/** @param[in]  desired velocity                                               */
/** @param[in]  predicted_drive estimated open loop motor drive                */
/*-----------------------------------------------------------------------------*/
void
FwVelocitySet( fw_controller *fw, int velocity, float predicted_drive )
{
	// set target velocity (motor rpm)
	fw->target        = velocity;

	// Set error so zero crossing is correctly detected
	fw->error         = fw->target - fw->current;
	fw->last_error    = fw->error;

	// Set predicted open loop drive value
	fw->drive_approx  = predicted_drive;
	// Set flag to detect first zero crossing
	fw->first_cross   = 1;
	// clear tbh variable
	fw->drive_at_zero = 0;
}

/*-----------------------------------------------------------------------------*/
/** @brief      Calculate the current flywheel motor velocity                  */
/** @param[in]  fw pointer to flywheel controller structure                    */
/*-----------------------------------------------------------------------------*/
void
FwCalculateSpeed( fw_controller *fw )
{
	int     delta_ms;
	int     delta_enc;

	// Get current encoder value
	fw->e_current = FwMotorEncoderGet();

	// This is just used so we don't need to know how often we are called
	// how many mS since we were last here
	delta_ms   = nSysTime - fw->v_time;
	fw->v_time = nSysTime;

	// Change in encoder count
	delta_enc = (fw->e_current - fw->e_last);

	// save last position
	fw->e_last = fw->e_current;

	// Calculate velocity in rpm
	fw->v_current = (1000.0 / delta_ms) * delta_enc * 60.0 / fw->ticks_per_rev;
}

/*-----------------------------------------------------------------------------*/
/** @brief      Update the velocity tbh controller variables                   */
/** @param[in]  fw pointer to flywheel controller structure                    */
/*-----------------------------------------------------------------------------*/
void
FwControlUpdateVelocityTbh( fw_controller *fw )
{
	// calculate error in velocity
	// target is desired velocity
	// current is measured velocity
	fw->error = fw->target - fw->current;

	// Use Kp as gain
	fw->drive =  fw->drive + (fw->error * fw->gain);

	// Clip - we are only going forwards
	if( fw->drive > 1 )
		fw->drive = 1;
	if( fw->drive < 0 )
		fw->drive = 0;

	// Check for zero crossing
	if( sgn(fw->error) != sgn(fw->last_error) ) {
		// First zero crossing after a new set velocity command
		if( fw->first_cross ) {
			// Set drive to the open loop approximation
			fw->drive = fw->drive_approx;
			fw->first_cross = 0;
		}
		else
			fw->drive = 0.5 * ( fw->drive + fw->drive_at_zero );

		// Save this drive value in the "tbh" variable
		fw->drive_at_zero = fw->drive;
	}

	// Save last error
	fw->last_error = fw->error;
}

/*-----------------------------------------------------------------------------*/
/** @brief     Task to control the velocity of the flywheel                    */
/*-----------------------------------------------------------------------------*/
task
FwControlTask()
{
	fw_controller *fw = &flywheel;

	// Set the gain
	fw->gain = 0.05;

	// We are using Speed geared motors
	// Set the encoder ticks per revolution
	fw->ticks_per_rev = MOTOR_TPR_QUAD;

	while(1)
	{
		// debug counter
		fw->counter++;

		// Calculate velocity
		FwCalculateSpeed( fw );

		// Set current speed for the tbh calculation code
		fw->current = fw->v_current;

		// Do the velocity TBH calculations
		FwControlUpdateVelocityTbh( fw ) ;

		// Scale drive into the range the motors need
		fw->motor_drive  = (fw->drive * FW_MAX_POWER) + 0.5;

		// Final Limit of motor values - don't really need this
		if( fw->motor_drive >  127 ) fw->motor_drive =  127;
		if( fw->motor_drive < -127 ) fw->motor_drive = -127;

		// and finally set the motor control value
		FwMotorSet( fw->motor_drive );

		// Run at somewhere between 20 and 50mS
		wait1Msec( FW_LOOP_SPEED );
	}
}

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code


void pre_auton()
{

	bStopTasksBetweenModes = true;


}



task autonomous()
{
	startTask(FwControlTask);
	FwVelocitySet( &flywheel, 2975	, 0.38 );\
	wait1Msec(3000);
	motor[intake] = -127;
	wait1Msec(350);
	motor[intake] = 80;
	wait1Msec(500);

}





void tankDrive(int left, int right){
	motor[midLeft] =  left;
	motor[backLeft] =  left;
	motor[midRight] =  right;
	motor[backRight] =  right;
}


#define RPM_INCREMENT 50
task usercontrol()

{

	char  str[32];

	bLCDBacklight = true;



  word btnU, btnD, held = 0;
  int desiredRpm = 0;

	// Start the flywheel control task
	startTask( FwControlTask );

	// Main user control loop
	while(1){


tankDrive(trueSpeed(vexRT[Ch3]),trueSpeed(vexRT[Ch2]));



    btnU = vexRT[Btn7L];
    btnD = vexRT[Btn7D];


		 // Different speeds set by buttons.
    if (vexRT[Btn8L]) {
      desiredRpm = 2350;
      FwVelocitySet(&flywheel, desiredRpm, 0.50);
    } else if (vexRT[Btn7U]) {
      desiredRpm = 3100;
      FwVelocitySet(&flywheel, desiredRpm, 1.00);
    } else if (vexRT[Btn8U]) {
      desiredRpm = 2900;
      FwVelocitySet(&flywheel, desiredRpm, 0.42);
    } else if (vexRT[Btn8D]) {
      desiredRpm = -500
      FwVelocitySet(&flywheel, desiredRpm, 0);
      } else if (vexRT[Btn8R]) {
      desiredRpm = 1738
      FwVelocitySet(&flywheel, desiredRpm, 0);
    } else if ((btnU || btnD) && !held) {
      desiredRpm += ((btnU - btnD) * RPM_INCREMENT);
      FwVelocitySet(&flywheel, desiredRpm, 0.50);
    }
    held = (btnU + btnD);



		if(vexRT[Btn6U]==1)
		{
			motor[intake] = 127;
		}
		else if(vexRT[Btn6D]==1)
		{
			motor[intake] = -127;
		}
		else
		{
			motor[intake] = 0;
			}
		if(vexRT[Btn5U]==1)&& flywheel.current > flywheel.target-75)
		{
			motor[intaketwo] = 127;
		}
		else if(vexRT[Btn5D]==1)
		{
			motor[intaketwo] = -127;
		}
		else
		{
			motor[intaketwo] = 0;
		}

		// Display useful things on the LCD
		sprintf( str, "%4d %4d  %5.2f", flywheel.target,  flywheel.current, nImmediateBatteryLevel/1000.0 );
		displayLCDString(0, 0, str );
		sprintf( str, "%4.2f %4.2f ", flywheel.drive, flywheel.drive_at_zero );
		displayLCDString(1, 0, str );

	
		wait1Msec(10);
  }
 }
